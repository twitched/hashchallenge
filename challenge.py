import random, string, hashlib, urllib2

random = random.SystemRandom()

class Challenge:
    """Class representing a challenge"""    
    def __init__(self, points, alg, desc):
        self.points = points
        self.alg = alg
        self.desc = desc
        #Default password is four digit PIN
        self.password = ''.join(random.choice(string.digits) for i in range(4)) 
        self.digest = self.password_to_digest(self.alg, self.password).hexdigest()
    
    def password_to_digest(self, alg, password):
        if alg in hashlib.algorithms:
            return getattr(hashlib, alg)(password)
        
    
class Mask_challenge(Challenge):
    """A challenge generated by a HashCat mask built-in charsets (adds '?9' for alphanumeric and removes ?b)"""
    def __init__(self, points, alg, desc, mask):
        Challenge.__init__(self, points, alg, desc)
        self.mask = mask
        self.password = self.mask_to_random(self.mask)
        self.digest = self.password_to_digest(self.alg, self.password).hexdigest()

    def mask_to_random(self, mask):
        lower = string.ascii_lowercase
        upper = string.ascii_uppercase
        digits = string.digits
        punct = ' !"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~' #from http://hashcat.net/wiki/doku.php?id=mask_attack
    
        password = ''
        q = False #if the previous char was a ?
        for char in mask:
            if q:
                if char == 'l':
                    password += random.choice(lower)
                elif char == 'u':
                    password += random.choice(upper)
                elif char == 'd':
                    password += random.choice(digits)
                elif char == 's':
                    password += random.choice(punct)
                elif char == '9':
                    password += random.choice(lower + upper + digits)
                elif char == 'a':
                    password += random.choice(lower + upper + digits + punct)
                else:
                    raise Exception('Invalid mask')
                q = False
            else:
                if char == '?':
                    q = True
                else:
                    password += char

        return password        
        
class Word_challenge(Challenge):    
    """A challenge generated by concatenating words from a wordlist"""
    def __init__(self, points, alg, desc, url, max_word, num_words):
        Challenge.__init__(self, points, alg, desc)
        self.url = url
        self.max_word = max_word
        self.num_words = num_words
        self.password = self.url_to_random(self.url, self.max_word, self.num_words)
        self.digest = self.password_to_digest(self.alg, self.password).hexdigest()
        
    def url_to_random(self, url, max_word, num_words):
        f = urllib2.urlopen(url)
        password = ''
        for i in range(0, num_words):
            rand_line = random.randrange(0,max_word)
            for j in range(0, rand_line - 1):
                f.readline()
            password += f.readline().strip()
        
        return password

    