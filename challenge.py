import random, string, hashlib, urllib.request

random = random.SystemRandom()

class Challenge:
    """Class representing a challenge"""    
    def __init__(self, points, alg, desc):
        self.points = points
        self.alg = alg
        self.desc = desc
        #Default password is four digit PIN
        self.password = ''.join(random.choice(string.digits) for i in range(4)) 
        self.digest = self.password_to_digest(self.alg, self.password).hexdigest()
    
    def password_to_digest(self, alg, password):
        if alg in hashlib.algorithms_available:
            return getattr(hashlib, alg)(password.encode('utf-8'))
        
    
class Mask_challenge(Challenge):
    """A challenge generated by a HashCat mask built-in charsets (adds '?9' for alphanumeric and removes ?b)"""
    def __init__(self, points, alg, desc, mask, url = None, min_word = 0, max_word = 0):
        Challenge.__init__(self, points, alg, desc)
        self.mask = mask
        self.url = url
        self.min_word = min_word
        self.max_word = max_word
        self.password = self.mask_to_random(self.mask)
        self.digest = self.password_to_digest(self.alg, self.password).hexdigest()

    def mask_to_random(self, mask):
        lower = string.ascii_lowercase
        upper = string.ascii_uppercase
        digits = string.digits
        punct = ' !"#$%&\'()*+,-./:;<=>?@[\\]^_`{}~' #from http://hashcat.net/wiki/doku.php?id=mask_attack 
		#"|" not included because it messes up markdown tables
    
        password = ''
        q = False #if the previous char was a ?
        for char in mask:
            if q:
                print(char)
                if char == 'l':
                    password += random.choice(lower)
                elif char == 'u':
                    password += random.choice(upper)
                elif char == 'd':
                    password += random.choice(digits)
                elif char == 's':
                    password += random.choice(punct)
                elif char == '9':
                    password += random.choice(lower + upper + digits)
                    print('password right now: ' + password)
                elif char == 'a':
                    password += random.choice(lower + upper + digits + punct)
                elif char == 'w':
                    password += self.url_to_random_word(self.url, self.min_word, self.max_word)
                else:
                    raise Exception('Invalid mask')
                q = False
            else:
                if char == '?':
                    q = True
                else:
                    password += char

        return password    
        
    def url_to_random_word(self, url, min_word, max_word):
        f = urllib.request.urlopen(url)

        for j in range(0, random.randrange(min_word, max_word - 1)):
            f.readline()
        return f.readline().decode('utf-8').strip()
    